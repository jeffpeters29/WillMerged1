// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181207151755_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Street");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CashRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("RelationshipId");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("WillId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("RelationshipId")
                        .IsUnique();

                    b.HasIndex("WillId");

                    b.ToTable("CashRecipients");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressId");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsAddressSame");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("LegalGuardianId");

                    b.Property<Guid>("RelationshipId");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("WillId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("LegalGuardianId")
                        .IsUnique()
                        .HasFilter("[LegalGuardianId] IS NOT NULL");

                    b.HasIndex("RelationshipId")
                        .IsUnique();

                    b.HasIndex("WillId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("MaritalStatusId");

                    b.Property<string>("Telephone");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("MaritalStatusId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Executor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsAwareFinances");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("RelationshipId");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("WillId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("RelationshipId")
                        .IsUnique();

                    b.HasIndex("WillId");

                    b.ToTable("Executors");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FuneralType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FuneralTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.GiftRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("RelationshipId");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("WillId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("RelationshipId")
                        .IsUnique();

                    b.HasIndex("WillId");

                    b.ToTable("GiftRecipients");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LegalGuardian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("RelationshipId");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("WillId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("RelationshipId")
                        .IsUnique();

                    b.HasIndex("WillId");

                    b.ToTable("LegalGuardians");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MaritalStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("ApplicationCore.Entities.NonProvision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ReasonWhy")
                        .HasMaxLength(500);

                    b.Property<Guid>("RelationshipId");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("WillId");

                    b.HasKey("Id");

                    b.HasIndex("RelationshipId")
                        .IsUnique();

                    b.HasIndex("WillId");

                    b.ToTable("NonProvisions");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Relationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResidueRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Level");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<Guid>("RelationshipId");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("WillId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("RelationshipId")
                        .IsUnique();

                    b.HasIndex("WillId");

                    b.ToTable("ResidueRecipients");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Trustee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("RelationshipId");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("WillId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("RelationshipId")
                        .IsUnique();

                    b.HasIndex("WillId");

                    b.ToTable("Trustees");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Will", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid>("FuneralTypeId");

                    b.Property<string>("FuneralWishes");

                    b.Property<Guid?>("PartnerId");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<int>("WillStatus");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("FuneralTypeId");

                    b.HasIndex("PartnerId")
                        .IsUnique()
                        .HasFilter("[PartnerId] IS NOT NULL");

                    b.ToTable("Wills");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Witness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Occupation")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("WillId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("WillId");

                    b.ToTable("Witnesses");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CashRecipient", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("CashRecipient")
                        .HasForeignKey("ApplicationCore.Entities.CashRecipient", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Relationship", "Relationship")
                        .WithOne("CashRecipient")
                        .HasForeignKey("ApplicationCore.Entities.CashRecipient", "RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Will", "Will")
                        .WithMany("CashRecipients")
                        .HasForeignKey("WillId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Child", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("Child")
                        .HasForeignKey("ApplicationCore.Entities.Child", "AddressId");

                    b.HasOne("ApplicationCore.Entities.LegalGuardian", "LegalGuardian")
                        .WithOne("Child")
                        .HasForeignKey("ApplicationCore.Entities.Child", "LegalGuardianId");

                    b.HasOne("ApplicationCore.Entities.Relationship", "Relationship")
                        .WithOne("Child")
                        .HasForeignKey("ApplicationCore.Entities.Child", "RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Will", "Will")
                        .WithMany("Children")
                        .HasForeignKey("WillId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Customer", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("Customer")
                        .HasForeignKey("ApplicationCore.Entities.Customer", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany("Customers")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Executor", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("Executor")
                        .HasForeignKey("ApplicationCore.Entities.Executor", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Relationship", "Relationship")
                        .WithOne("Executor")
                        .HasForeignKey("ApplicationCore.Entities.Executor", "RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Will", "Will")
                        .WithMany("Executors")
                        .HasForeignKey("WillId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.GiftRecipient", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("GiftRecipient")
                        .HasForeignKey("ApplicationCore.Entities.GiftRecipient", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Relationship", "Relationship")
                        .WithOne("GiftRecipient")
                        .HasForeignKey("ApplicationCore.Entities.GiftRecipient", "RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Will", "Will")
                        .WithMany("GiftRecipients")
                        .HasForeignKey("WillId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LegalGuardian", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("LegalGuardian")
                        .HasForeignKey("ApplicationCore.Entities.LegalGuardian", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Relationship", "Relationship")
                        .WithOne("LegalGuardian")
                        .HasForeignKey("ApplicationCore.Entities.LegalGuardian", "RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Will", "Will")
                        .WithMany("LegalGuardians")
                        .HasForeignKey("WillId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.NonProvision", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Relationship", "Relationship")
                        .WithOne("NonProvision")
                        .HasForeignKey("ApplicationCore.Entities.NonProvision", "RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Will", "Will")
                        .WithMany("NonProvisions")
                        .HasForeignKey("WillId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Partner", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("Partner")
                        .HasForeignKey("ApplicationCore.Entities.Partner", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResidueRecipient", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("ResidueRecipient")
                        .HasForeignKey("ApplicationCore.Entities.ResidueRecipient", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Relationship", "Relationship")
                        .WithOne("ResidueRecipient")
                        .HasForeignKey("ApplicationCore.Entities.ResidueRecipient", "RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Will", "Will")
                        .WithMany("ResidueRecipients")
                        .HasForeignKey("WillId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Trustee", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("Trustee")
                        .HasForeignKey("ApplicationCore.Entities.Trustee", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Relationship", "Relationship")
                        .WithOne("Trustee")
                        .HasForeignKey("ApplicationCore.Entities.Trustee", "RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Will", "Will")
                        .WithMany("Trustees")
                        .HasForeignKey("WillId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Will", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Customer", "Customer")
                        .WithOne("Will")
                        .HasForeignKey("ApplicationCore.Entities.Will", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.FuneralType", "FuneralType")
                        .WithMany("Wills")
                        .HasForeignKey("FuneralTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithOne("Will")
                        .HasForeignKey("ApplicationCore.Entities.Will", "PartnerId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Witness", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Address", "Address")
                        .WithOne("Witness")
                        .HasForeignKey("ApplicationCore.Entities.Witness", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Will", "Will")
                        .WithMany("Witnesses")
                        .HasForeignKey("WillId");
                });
#pragma warning restore 612, 618
        }
    }
}
